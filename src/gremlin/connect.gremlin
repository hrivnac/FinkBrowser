import com.Lomikel.Januser.GremlinRecipies

icom = 100
gr = new GremlinRecipies(g)

importDates = g.V().has('lbl', 'Imports').out().has('lbl', 'Import').has('complete', true).or(hasNot('connected'), has('connected', false)).values('importDate').toSet();[]
println('' + importDates.size() + ' imports to connect')

sources = [:]
g.V().has('lbl', 'source').elementMap().toStream().each{sources += [(it['objectId']):it[id]]}
println('' + sources.size() + ' sources already exist')

for (importDate in importDates) {
  idds = g.V().has('importDate', importDate).has('objectId').id().toSet();[]
  if (idds.size() == 0) {
    println('Ignoring empty import on ' + importDate)
    //g.V().has('lbl', 'Imports').out().has('lbl', 'Import').has('importDate', importDate).drop().iterate()
    //g.getGraph().tx().commit()
    }
  else {
    println('' + idds.size() + ' vertexes to connect to source for imports on ' + importDate)
    t0 = System.currentTimeMillis()
    i  = 0
    ia = 0
    ir = 0
    for (idd in idds) {
      a = g.V(idd).next()
      objectId = a.values('objectId').next()
      idsource = sources[objectId]
      if (idsource == null) {
        ia++
        s = g.addV('source').property('lbl', 'source').property('objectId', objectId)
        }
      else {
        ir++
        s = g.V(idsource)        
        }
      s.addE('has').to(a).next() 
      //s = g.addV('source').property('lbl', 'source').property('objectId', objectId).addE('has').to(a).next()
      //s = gr.getOrCreate('source', 'objectId', objectId).get(0)
      //Lomikel.get_or_create(g, 'source', 'objectId', objectId).addE('has').to(a).next()
      //gr.addEdge(s, a, 'has')
      g.V(idd).properties('objectId', objectId).drop().iterate()
      if (++i % icom == 0) {
        g.getGraph().tx().commit()
        t = (System.currentTimeMillis() - t0) / 1000
        println('' + i + ' vertexes connected to source in ' + t + 's, freq = ' + (int)(i / t) + 'Hz')
        }
      }
    if (i > 0) {
      g.getGraph().tx().commit()
      t = (System.currentTimeMillis() - t0) / 1000
      println('' + i + ' vertexes connected to source in ' + t + 's, freq = ' + (int)(i / t) + 'Hz')
      println('' + ia + ' sources added, ' + ir + ' sources reused')
      g.V().has('lbl', 'Imports').out().has('lbl', 'Import').has('importDate', importDate).property('connected', true).iterate()
      g.getGraph().tx().commit()
      }
    }        
  }
  
